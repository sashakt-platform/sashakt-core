"""add provider tables and permissions

Revision ID: 168f67609694
Revises: 449d29a9e71d
Create Date: 2025-09-25 03:26:34.011995

"""

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlmodel import Session, select

# Import models for type-safe queries
from app.models import Permission, Role, RolePermission

# revision identifiers, used by Alembic.
revision = "168f67609694"
down_revision = "449d29a9e71d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Create provider table
    op.create_table(
        "provider",
        sa.Column(
            "provider_type", sa.Enum("BIGQUERY", name="providertype"), nullable=False
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.Column("modified_date", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_provider_name"), "provider", ["name"], unique=False)
    op.create_index(
        op.f("ix_provider_provider_type"), "provider", ["provider_type"], unique=False
    )

    # Create organization_provider table
    op.create_table(
        "organization_provider",
        sa.Column("organization_id", sa.Integer(), nullable=False),
        sa.Column("provider_id", sa.Integer(), nullable=False),
        sa.Column("config_json", sa.JSON(), nullable=True),
        sa.Column("is_enabled", sa.Boolean(), nullable=False),
        sa.Column("last_sync_timestamp", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_date", sa.DateTime(), nullable=True),
        sa.Column("modified_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
        ),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["provider.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # ### end Alembic commands ###

    # Add provider permissions data
    bind = op.get_bind()
    session = Session(bind=bind)

    # Provider permissions to add
    provider_permissions = [
        {
            "name": "create_provider",
            "description": "Create New Provider",
            "roles": ["super_admin", "system_admin"],
        },
        {
            "name": "update_provider",
            "description": "Update Existing Provider",
            "roles": ["super_admin", "system_admin"],
        },
        {
            "name": "delete_provider",
            "description": "Delete Existing Provider",
            "roles": ["super_admin", "system_admin"],
        },
        {
            "name": "read_provider",
            "description": "Read Provider Details",
            "roles": ["super_admin", "system_admin"],
        },
    ]

    # Insert permissions and role_permissions if they don't exist
    for perm_data in provider_permissions:
        # Check if permission already exists
        existing_perm = session.exec(
            select(Permission).where(Permission.name == perm_data["name"])
        ).first()

        if not existing_perm:
            # Create new permission
            new_permission = Permission(
                name=perm_data["name"],
                description=perm_data["description"],
                is_active=True,
            )
            session.add(new_permission)
            session.commit()
            session.refresh(new_permission)
            permission_id = new_permission.id
        else:
            permission_id = existing_perm.id

        # Assign permission to specified roles
        for role_name in perm_data["roles"]:
            # Get role
            role = session.exec(select(Role).where(Role.name == role_name)).first()

            if role:
                # Check if role_permission already exists
                existing_role_perm = session.exec(
                    select(RolePermission).where(
                        RolePermission.role_id == role.id,
                        RolePermission.permission_id == permission_id,
                    )
                ).first()

                if not existing_role_perm:
                    # Create role_permission
                    role_permission = RolePermission(
                        role_id=role.id, permission_id=permission_id
                    )
                    session.add(role_permission)
                    session.commit()
                    session.refresh(role_permission)

    session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Remove provider permissions first
    bind = op.get_bind()
    session = Session(bind=bind)

    provider_permission_names = [
        "create_provider",
        "update_provider",
        "delete_provider",
        "read_provider",
    ]

    for perm_name in provider_permission_names:
        # Find the permission
        permission = session.exec(
            select(Permission).where(Permission.name == perm_name)
        ).first()

        if permission:
            # Remove from role_permission first (foreign key constraint)
            role_permissions = session.exec(
                select(RolePermission).where(
                    RolePermission.permission_id == permission.id
                )
            ).all()

            for role_perm in role_permissions:
                session.delete(role_perm)

            # Remove the permission
            session.delete(permission)
            session.commit()

    session.commit()

    # Drop tables
    op.drop_table("organization_provider")
    op.drop_index(op.f("ix_provider_provider_type"), table_name="provider")
    op.drop_index(op.f("ix_provider_name"), table_name="provider")
    op.drop_table("provider")

    # Drop the enum type
    op.execute("DROP TYPE IF EXISTS providertype")

    # ### end Alembic commands ###
