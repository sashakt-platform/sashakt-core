"""Update Table Names for Correct Naming convention

Revision ID: 2940b075b50a
Revises: cae4d5024515
Create Date: 2025-10-01 15:42:27.561151

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2940b075b50a'
down_revision = 'cae4d5024515'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entity_type',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('modified_date', sa.DateTime(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_entity_type_name'), 'entity_type', ['name'], unique=False)
    op.create_table('tag_type',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('modified_date', sa.DateTime(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tag_type_name'), 'tag_type', ['name'], unique=False)
    op.create_table('user_state',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['state_id'], ['state.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'state_id')
    )
    op.drop_index('ix_entitytype_name', table_name='entitytype')
    op.drop_constraint('entity_entity_type_id_fkey', 'entity', type_='foreignkey')
    op.drop_constraint('tag_tag_type_id_fkey', 'tag', type_='foreignkey')
    op.drop_table('entitytype')
    op.drop_table('userstate')
    op.drop_index('ix_tagtype_name', table_name='tagtype')
    op.drop_table('tagtype')
    op.create_foreign_key(None, 'entity', 'entity_type', ['entity_type_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'tag', 'tag_type', ['tag_type_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tag', type_='foreignkey')
    op.create_foreign_key('tag_tag_type_id_fkey', 'tag', 'tagtype', ['tag_type_id'], ['id'])
    op.drop_constraint(None, 'entity', type_='foreignkey')
    op.create_foreign_key('entity_entity_type_id_fkey', 'entity', 'entitytype', ['entity_type_id'], ['id'])
    op.create_table('tagtype',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], name='tagtype_created_by_id_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], name='tagtype_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tagtype_pkey')
    )
    op.create_index('ix_tagtype_name', 'tagtype', ['name'], unique=False)
    op.create_table('userstate',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('state_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['state_id'], ['state.id'], name='userstate_state_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='userstate_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='userstate_pkey'),
    sa.UniqueConstraint('user_id', 'state_id', name='userstate_user_id_state_id_key')
    )
    op.create_table('entitytype',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('modified_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], name='entitytype_created_by_id_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], name='entitytype_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='entitytype_pkey')
    )
    op.create_index('ix_entitytype_name', 'entitytype', ['name'], unique=False)
    op.drop_table('user_state')
    op.drop_index(op.f('ix_tag_type_name'), table_name='tag_type')
    op.drop_table('tag_type')
    op.drop_index(op.f('ix_entity_type_name'), table_name='entity_type')
    op.drop_table('entity_type')
    # ### end Alembic commands ###
